var DES = (function() {
	var BLOCK_SIZE = 8;
	var BYTEBIT	= [01, 02, 04, 010, 020, 040, 0100, 0200],
		BIGBYTE = [ 0x800000, 0x400000, 0x200000, 0x100000,
					0x080000, 0x040000, 0x020000, 0x010000,
					0x008000, 0x004000, 0x002000, 0x001000,
					0x000800, 0x000400, 0x000200, 0x000100,
					0x000080, 0x000040, 0x000020, 0x000010,
					0x000008, 0x000004, 0x000002, 0x000001],
		PC1     = [ 56, 48, 40, 32, 24, 16,  8,	 0, 57, 49, 41, 33, 25, 17,
			 		9,  1, 58, 50, 42, 34, 26,	18, 10,  2, 59, 51, 43, 35,
					62, 54, 46, 38, 30, 22, 14,	 6, 61, 53, 45, 37, 29, 21,
					13,  5, 60, 52, 44, 36, 28,	20, 12,  4, 27, 19, 11,  3],
		TOTROT  = [ 1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28],
		PC2     = [ 13, 16, 10, 23,  0,  4,  2, 27, 14,  5, 20,  9,
					22, 18, 11,  3, 25,  7, 15,  6, 26, 19, 12,  1,
					40, 51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47,
					43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31];
	var	SP1 = [ 0x01010400, 0x00000000, 0x00010000, 0x01010404,
				0x01010004, 0x00010404, 0x00000004, 0x00010000,
				0x00000400, 0x01010400, 0x01010404, 0x00000400,
				0x01000404, 0x01010004, 0x01000000, 0x00000004,
				0x00000404, 0x01000400, 0x01000400, 0x00010400,
				0x00010400, 0x01010000, 0x01010000, 0x01000404,
				0x00010004, 0x01000004, 0x01000004, 0x00010004,
				0x00000000, 0x00000404, 0x00010404, 0x01000000,
				0x00010000, 0x01010404, 0x00000004, 0x01010000,
				0x01010400, 0x01000000, 0x01000000, 0x00000400,
				0x01010004, 0x00010000, 0x00010400, 0x01000004,
				0x00000400, 0x00000004, 0x01000404, 0x00010404,
				0x01010404, 0x00010004, 0x01010000, 0x01000404,
				0x01000004, 0x00000404, 0x00010404, 0x01010400,
				0x00000404, 0x01000400, 0x01000400, 0x00000000,
				0x00010004, 0x00010400, 0x00000000, 0x01010004],
		SP2 = [ 0x80108020, 0x80008000, 0x00008000, 0x00108020,
				0x00100000, 0x00000020, 0x80100020, 0x80008020,
				0x80000020, 0x80108020, 0x80108000, 0x80000000,
				0x80008000, 0x00100000, 0x00000020, 0x80100020,
				0x00108000, 0x00100020, 0x80008020, 0x00000000,
				0x80000000, 0x00008000, 0x00108020, 0x80100000,
				0x00100020, 0x80000020, 0x00000000, 0x00108000,
				0x00008020, 0x80108000, 0x80100000, 0x00008020,
				0x00000000, 0x00108020, 0x80100020, 0x00100000,
				0x80008020, 0x80100000, 0x80108000, 0x00008000,
				0x80100000, 0x80008000, 0x00000020, 0x80108020,
				0x00108020, 0x00000020, 0x00008000, 0x80000000,
				0x00008020, 0x80108000, 0x00100000, 0x80000020,
				0x00100020, 0x80008020, 0x80000020, 0x00100020,
				0x00108000, 0x00000000, 0x80008000, 0x00008020,
				0x80000000, 0x80100020, 0x80108020, 0x00108000],
		SP3 = [ 0x00000208, 0x08020200, 0x00000000, 0x08020008,
				0x08000200, 0x00000000, 0x00020208, 0x08000200,
				0x00020008, 0x08000008, 0x08000008, 0x00020000,
				0x08020208, 0x00020008, 0x08020000, 0x00000208,
				0x08000000, 0x00000008, 0x08020200, 0x00000200,
				0x00020200, 0x08020000, 0x08020008, 0x00020208,
				0x08000208, 0x00020200, 0x00020000, 0x08000208,
				0x00000008, 0x08020208, 0x00000200, 0x08000000,
				0x08020200, 0x08000000, 0x00020008, 0x00000208,
				0x00020000, 0x08020200, 0x08000200, 0x00000000,
				0x00000200, 0x00020008, 0x08020208, 0x08000200,
				0x08000008, 0x00000200, 0x00000000, 0x08020008,
				0x08000208, 0x00020000, 0x08000000, 0x08020208,
				0x00000008, 0x00020208, 0x00020200, 0x08000008,
				0x08020000, 0x08000208, 0x00000208, 0x08020000,
				0x00020208, 0x00000008, 0x08020008, 0x00020200],
		SP4 = [ 0x00802001, 0x00002081, 0x00002081, 0x00000080,
				0x00802080, 0x00800081, 0x00800001, 0x00002001,
				0x00000000, 0x00802000, 0x00802000, 0x00802081,
				0x00000081, 0x00000000, 0x00800080, 0x00800001,
				0x00000001, 0x00002000, 0x00800000, 0x00802001,
				0x00000080, 0x00800000, 0x00002001, 0x00002080,
				0x00800081, 0x00000001, 0x00002080, 0x00800080,
				0x00002000, 0x00802080, 0x00802081, 0x00000081,
				0x00800080, 0x00800001, 0x00802000, 0x00802081,
				0x00000081, 0x00000000, 0x00000000, 0x00802000,
				0x00002080, 0x00800080, 0x00800081, 0x00000001,
				0x00802001, 0x00002081, 0x00002081, 0x00000080,
				0x00802081, 0x00000081, 0x00000001, 0x00002000,
				0x00800001, 0x00002001, 0x00802080, 0x00800081,
				0x00002001, 0x00002080, 0x00800000, 0x00802001,
				0x00000080, 0x00800000, 0x00002000, 0x00802080],
		SP5 = [ 0x00000100, 0x02080100, 0x02080000, 0x42000100,
				0x00080000, 0x00000100, 0x40000000, 0x02080000,
				0x40080100, 0x00080000, 0x02000100, 0x40080100,
				0x42000100, 0x42080000, 0x00080100, 0x40000000,
				0x02000000, 0x40080000, 0x40080000, 0x00000000,
				0x40000100, 0x42080100, 0x42080100, 0x02000100,
				0x42080000, 0x40000100, 0x00000000, 0x42000000,
				0x02080100, 0x02000000, 0x42000000, 0x00080100,
				0x00080000, 0x42000100, 0x00000100, 0x02000000,
				0x40000000, 0x02080000, 0x42000100, 0x40080100,
				0x02000100, 0x40000000, 0x42080000, 0x02080100,
				0x40080100, 0x00000100, 0x02000000, 0x42080000,
				0x42080100, 0x00080100, 0x42000000, 0x42080100,
				0x02080000, 0x00000000, 0x40080000, 0x42000000,
				0x00080100, 0x02000100, 0x40000100, 0x00080000,
				0x00000000, 0x40080000, 0x02080100, 0x40000100],
		SP6 = [ 0x20000010, 0x20400000, 0x00004000, 0x20404010,
				0x20400000, 0x00000010, 0x20404010, 0x00400000,
				0x20004000, 0x00404010, 0x00400000, 0x20000010,
				0x00400010, 0x20004000, 0x20000000, 0x00004010,
				0x00000000, 0x00400010, 0x20004010, 0x00004000,
				0x00404000, 0x20004010, 0x00000010, 0x20400010,
				0x20400010, 0x00000000, 0x00404010, 0x20404000,
				0x00004010, 0x00404000, 0x20404000, 0x20000000,
				0x20004000, 0x00000010, 0x20400010, 0x00404000,
				0x20404010, 0x00400000, 0x00004010, 0x20000010,
				0x00400000, 0x20004000, 0x20000000, 0x00004010,
				0x20000010, 0x20404010, 0x00404000, 0x20400000,
				0x00404010, 0x20404000, 0x00000000, 0x20400010,
				0x00000010, 0x00004000, 0x20400000, 0x00404010,
				0x00004000, 0x00400010, 0x20004010, 0x00000000,
				0x20404000, 0x20000000, 0x00400010, 0x20004010],
		SP7 = [ 0x00200000, 0x04200002, 0x04000802, 0x00000000,
				0x00000800, 0x04000802, 0x00200802, 0x04200800,
				0x04200802, 0x00200000, 0x00000000, 0x04000002,
				0x00000002, 0x04000000, 0x04200002, 0x00000802,
				0x04000800, 0x00200802, 0x00200002, 0x04000800,
				0x04000002, 0x04200000, 0x04200800, 0x00200002,
				0x04200000, 0x00000800, 0x00000802, 0x04200802,
				0x00200800, 0x00000002, 0x04000000, 0x00200800,
				0x04000000, 0x00200800, 0x00200000, 0x04000802,
				0x04000802, 0x04200002, 0x04200002, 0x00000002,
				0x00200002, 0x04000000, 0x04000800, 0x00200000,
				0x04200800, 0x00000802, 0x00200802, 0x04200800,
				0x00000802, 0x04000002, 0x04200802, 0x04200000,
				0x00200800, 0x00000000, 0x00000002, 0x04200802,
				0x00000000, 0x00200802, 0x04200000, 0x00000800,
				0x04000002, 0x04000800, 0x00000800, 0x00200002],
		SP8 = [	0x10001040, 0x00001000, 0x00040000, 0x10041040,
				0x10000000, 0x10001040, 0x00000040, 0x10000000,
				0x00040040, 0x10040000, 0x10041040, 0x00041000,
				0x10041000, 0x00041040, 0x00001000, 0x00000040,
				0x10040000, 0x10000040, 0x10001000, 0x00001040,
				0x00041000, 0x00040040, 0x10040040, 0x10041000,
				0x00001040, 0x00000000, 0x00000000, 0x10040040,
				0x10000040, 0x10001000, 0x00041040, 0x00040000,
				0x00041040, 0x00040000, 0x10041000, 0x00001000,
				0x00000040, 0x10040040, 0x00001000, 0x00041040,
				0x10001000, 0x00000040, 0x10000040, 0x10040000,
				0x10040040, 0x10000000, 0x00040000, 0x10001040,
				0x00000000, 0x10041040, 0x00040040, 0x10000040,
				0x10040000, 0x10001000, 0x10001040, 0x00000000,
				0x10041040, 0x00041000, 0x00041000, 0x00001040,
				0x00001040, 0x00040040, 0x10000000, 0x10041000];
				
	function deskey(key) {
		var pcr = new Array(56), kn = new Array(32), pc1m = new Array(56);
		for (var i = 0; i < 56; i ++ ) {
			var l = PC1[i]; var m = l & 07;
			pc1m[i] = (key.charCodeAt(l >>> 3) & BYTEBIT[m]) != 0 ? 1 : 0;
		}
		for (var i = 0; i < 16; i ++) {
			var m = i << 1; var n = m + 1;
			kn[m] = 0; kn[n] = 0;
			for (var j = 0; j < 28; j ++) {
				var l = (j + TOTROT[i]) % 28;
				pcr[j] = pc1m[l]; pcr[j + 28] = pc1m[l + 28];
			}
			for (var j = 0; j < 24; j ++) {
				if (pcr[PC2[j]] != 0) kn[m] = kn[m] | BIGBYTE[j];
				if (pcr[PC2[j+24]] != 0) kn[n] = kn[n] | BIGBYTE[j];
			}
		}
		return kn;
	}
	
	function cookey(raw1) {
		var cook = [];
		for (var i = 0; i< 16; i++) {
			var a = raw1[i * 2 + 0], b = raw1[i * 2 + 1];
			var x = (a & 0x00fc0000) << 6;
			x |= (a & 0x00000fc0) << 10;
			x |= (b & 0x00fc0000) >>> 10;
			x |= (b & 0x00000fc0) >>> 6;
			cook.push(x);
			x  = (a & 0x0003f000) << 12;
			x |= (a & 0x0000003f) << 16;
			x |= (b & 0x0003f000) >>> 4;
			x |= (b & 0x0000003f);
			cook.push(x);			
		}
		return cook;
	}
	
	function des(block, keys) {
		var left = block[0], right = block[1];

		var work = ((left >>> 4) ^ right) & 0x0f0f0f0f;
		right ^= work; left ^= (work << 4);
		work = ((left >>> 16) ^ right) & 0x0000ffff;
		right ^= work; left ^= (work << 16);
		work = ((right >>> 2) ^ left) & 0x33333333;
		left ^= work; right ^= (work << 2);
		work = ((right >>> 8) ^ left) & 0x00ff00ff;
		left ^= work; right ^= (work << 8);
		right = ((right << 1) | ((right >>> 31) & 1)) & 0xffffffff;
		work = (left ^ right) & 0xaaaaaaaa;
		left ^= work;right ^= work;
		left = ((left << 1) | ((left >>> 31) & 1)) & 0xffffffff;

		for (var i = 0; i < 8; i++) {
			work  = (right << 28) | (right >>> 4); work ^= keys[i * 4 + 0];
			var fval = SP7[ work		 & 0x3f]
			fval |= SP5[(work >>>  8) & 0x3f];
			fval |= SP3[(work >>> 16) & 0x3f];
			fval |= SP1[(work >>> 24) & 0x3f];
			work  = right ^ keys[i * 4 + 1];
			fval |= SP8[ work		 & 0x3f];
			fval |= SP6[(work >>>  8) & 0x3f];
			fval |= SP4[(work >>> 16) & 0x3f];
			fval |= SP2[(work >>> 24) & 0x3f];
			left ^= fval;
			work  = (left << 28) | (left >>> 4);
			work ^= keys[i * 4 + 2];
			fval  = SP7[ work		 & 0x3f];
			fval |= SP5[(work >>>  8) & 0x3f];
			fval |= SP3[(work >>> 16) & 0x3f];
			fval |= SP1[(work >>> 24) & 0x3f];
			work  = left ^ keys[i * 4 + 3];
			fval |= SP8[ work		 & 0x3f];
			fval |= SP6[(work >>>  8) & 0x3f];
			fval |= SP4[(work >>> 16) & 0x3f];
			fval |= SP2[(work >>> 24) & 0x3f];
			right ^= fval;
		}
		right = ((right << 31) | (right >>> 1)) & 0xffffffff;
		work = (left ^ right) & 0xaaaaaaaa;
		left ^= work;right ^= work;
		left = ((left << 31) | (left >>> 1)) & 0xffffffff;
		work = ((left >>> 8) ^ right) & 0x00ff00ff;
		right ^= work; left ^= (work << 8);
		work = ((left >>> 2) ^ right) & 0x33333333;
		right ^= work; left ^= (work << 2);
		work = ((right >>> 16) ^ left) & 0x0000ffff;
		left ^= work; right ^= (work << 16);
		work = ((right >>> 4) ^ left) & 0x0f0f0f0f
		left ^= work; right ^= (work << 4);
		return pack(right).concat(pack(left));
	}		
	
	function unpack2(block) {		
		function unpack(index) {
			return ((block[index * 4] & 0xff) << 24)
                    | ((block[index * 4+ 1] & 0xff) << 16)
                    | ((block[index * 4+ 2] & 0xff) << 8)
                    | (block[index * 4+ 3] & 0xff);
		}
		return [unpack(0), unpack(1)];
	}
	
	function pack(number) {
		var result = new Array(4);
		for (var i = 0; i < 4; i++) {
			result[i] = (number >>> ((3-i) * 8)) % 256;
			number -= result[i] << ((3-i) * 8);
		}
		return result;
	}
		
	function update(data, keys) {
		var result = [];
		var numberOfBlocks = data.length / BLOCK_SIZE, residual = data.length % BLOCK_SIZE;
		for (var i = 0; i < numberOfBlocks; i ++) {
			var block = unpack2(data.slice(i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE));
			result = result.concat(des(block, keys));			
		}
		return result;
	}	
		
	return {
		encrypt:function(key, message) {
			var _key = key.slice(0, BLOCK_SIZE);
			var padding = BLOCK_SIZE - _key.length;
			for (var i = 0; i < padding; i++) _key += "\0";
			return update(message, cookey(deskey(_key)));
		}	
	};
})();
